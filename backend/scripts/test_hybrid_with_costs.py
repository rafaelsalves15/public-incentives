#!/usr/bin/env python3
"""
Teste do Sistema H√≠brido com Monitoriza√ß√£o de Custos em Tempo Real

Este script testa o sistema h√≠brido e mostra todos os custos da OpenAI API
em tempo real, incluindo:
- Custos de embeddings
- Custos de LLM
- Cache hits/misses
- Economias totais
"""

import sys
import os
sys.path.append('/app')

from app.db.database import SessionLocal
from app.services.ai_processor import AIProcessor
from app.services.embedding_service import EmbeddingService
from app.services.vector_database_service import VectorDatabaseService
from app.services.hybrid_matching_service import HybridMatchingService
from app.services.company_matcher_unified import CompanyMatcherUnified
from app.db.models import Incentive, Company, IncentiveMetadata
import logging
import time
import json

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_hybrid_matching_with_cost_tracking():
    """Testa o sistema h√≠brido com monitoriza√ß√£o completa de custos"""
    
    print("üöÄ TESTE DO SISTEMA H√çBRIDO COM MONITORIZA√á√ÉO DE CUSTOS")
    print("=" * 70)
    
    # Inicializar servi√ßos
    db = SessionLocal()
    
    try:
        # 1. Inicializar servi√ßos
        print("üîß Inicializando servi√ßos...")
        ai_processor = AIProcessor(api_key=os.getenv('OPENAI_API_KEY'), session=db)
        embedding_service = EmbeddingService(api_key=os.getenv('OPENAI_API_KEY'), session=db)
        vector_db_service = VectorDatabaseService(embedding_service)
        hybrid_service = HybridMatchingService(ai_processor, embedding_service, vector_db_service)
        
        # Sistema original para compara√ß√£o
        original_matcher = CompanyMatcherUnified(ai_processor)
        
        print("‚úÖ Servi√ßos inicializados")
        print()
        
        # 2. Mostrar estat√≠sticas iniciais de custos
        print("üí∞ ESTAT√çSTICAS INICIAIS DE CUSTOS")
        print("-" * 50)
        initial_stats = ai_processor.cost_tracker.get_total_stats()
        print(f"Total hist√≥rico: {initial_stats['all_time']['total_cost_formatted']}")
        print(f"Total de chamadas: {initial_stats['all_time']['total_calls']}")
        print()
        
        # 3. Obter incentivo de teste
        print("üìã Selecionando incentivo de teste...")
        incentive = db.query(Incentive).filter(
            Incentive.title.like('%Digitaliza√ß√£o%')
        ).first()
        
        if not incentive:
            print("‚ùå Incentivo 'Digitaliza√ß√£o' n√£o encontrado!")
            return
        
        print(f"üéØ INCENTIVO: {incentive.title}")
        print(f"üìù Descri√ß√£o: {incentive.description[:100]}...")
        
        ai_desc = incentive.ai_description or {}
        print(f"üè≠ CAE Codes Eleg√≠veis: {ai_desc.get('eligible_cae_codes', [])}")
        print(f"üåç Setores Eleg√≠veis: {ai_desc.get('eligible_sectors', [])}")
        print()
        
        # 4. Resetar estat√≠sticas de sess√£o para teste limpo
        ai_processor.cost_tracker.reset_session_stats()
        embedding_service.cost_tracker.reset_session_stats()
        
        print("üîÑ Estat√≠sticas de sess√£o resetadas para teste limpo")
        print()
        
        # 5. Testar sistema h√≠brido com tracking visual
        print("üß† TESTANDO SISTEMA H√çBRIDO...")
        print("-" * 50)
        
        # Iniciar tracking visual do incentivo
        ai_processor.cost_tracker.start_incentive(incentive.title, 1, 1)
        
        start_time = time.time()
        
        hybrid_matches = hybrid_service.find_top_matches(
            session=db,
            incentive_id=str(incentive.incentive_id),
            limit=5,
            use_hybrid=True
        )
        
        hybrid_time = time.time() - start_time
        
        # Finalizar tracking visual
        ai_processor.cost_tracker.end_incentive()
        
        print(f"‚úÖ Sistema H√≠brido: {len(hybrid_matches)} matches em {hybrid_time:.2f}s")
        print()
        
        # 6. Testar sistema original para compara√ß√£o
        print("üîÑ TESTANDO SISTEMA ORIGINAL...")
        print("-" * 50)
        
        # Resetar estat√≠sticas para teste original
        ai_processor.cost_tracker.reset_session_stats()
        
        # Iniciar tracking visual
        ai_processor.cost_tracker.start_incentive(f"{incentive.title} (Original)", 1, 1)
        
        start_time = time.time()
        
        original_matches = hybrid_service.find_top_matches(
            session=db,
            incentive_id=str(incentive.incentive_id),
            limit=5,
            use_hybrid=False
        )
        
        original_time = time.time() - start_time
        
        # Finalizar tracking visual
        ai_processor.cost_tracker.end_incentive()
        
        print(f"‚úÖ Sistema Original: {len(original_matches)} matches em {original_time:.2f}s")
        print()
        
        # 7. An√°lise detalhada de custos
        print("üí∞ AN√ÅLISE DETALHADA DE CUSTOS")
        print("=" * 70)
        
        # Estat√≠sticas finais
        final_stats = ai_processor.cost_tracker.get_total_stats()
        
        print("üìä ESTAT√çSTICAS GERAIS:")
        print(f"   Total hist√≥rico: {final_stats['all_time']['total_cost_formatted']}")
        print(f"   Total de chamadas: {final_stats['all_time']['total_calls']}")
        print(f"   Cache hit rate: {final_stats['all_time']['cache_stats']['hit_rate']:.1f}%")
        print()
        
        print("üìà BREAKDOWN POR OPERA√á√ÉO:")
        for op in final_stats['by_operation']:
            print(f"   {op['operation']:25}: {op['calls']:3} chamadas, ${op['cost']:.6f}, ${op['avg_cost_per_call']:.6f}/chamada")
        
        print()
        
        # 8. Compara√ß√£o de resultados
        print("üìä COMPARA√á√ÉO DE RESULTADOS")
        print("=" * 70)
        
        print("üèÜ SISTEMA H√çBRIDO (com embeddings):")
        print("-" * 40)
        
        for i, match in enumerate(hybrid_matches, 1):
            print(f"\n{i}. {match['company_name']}")
            print(f"   üß† Similaridade Sem√¢ntica: {match['semantic_similarity']:.3f}")
            print(f"   üìä Score Unificado: {match['unified_score']}")
            print(f"   ü§ñ Score LLM: {match['llm_score']:.3f}")
            print(f"   üéØ Score Total: {match['total_score']:.3f}")
            print(f"   üè∑Ô∏è CAE: {match.get('cae_primary_label', 'N/A')}")
        
        print("\nüîÑ SISTEMA ORIGINAL (sem embeddings):")
        print("-" * 40)
        
        for i, match in enumerate(original_matches, 1):
            print(f"\n{i}. {match['company_name']}")
            print(f"   üß† Similaridade Sem√¢ntica: {match['semantic_similarity']:.3f} (N/A)")
            print(f"   üìä Score Unificado: {match['unified_score']}")
            print(f"   ü§ñ Score LLM: {match['llm_score']:.3f}")
            print(f"   üéØ Score Total: {match['total_score']:.3f}")
            print(f"   üè∑Ô∏è CAE: {match.get('cae_primary_label', 'N/A')}")
        
        # 9. An√°lise de performance e custos
        print("\nüìà AN√ÅLISE DE PERFORMANCE E CUSTOS")
        print("=" * 70)
        
        # Tempo de execu√ß√£o
        time_improvement = ((original_time - hybrid_time) / original_time) * 100 if original_time > 0 else 0
        print(f"‚è±Ô∏è Tempo de Execu√ß√£o:")
        print(f"   Sistema H√≠brido: {hybrid_time:.2f}s")
        print(f"   Sistema Original: {original_time:.2f}s")
        print(f"   Melhoria: {time_improvement:+.1f}%")
        
        # Qualidade dos matches
        hybrid_avg_score = sum(m['total_score'] for m in hybrid_matches) / len(hybrid_matches) if hybrid_matches else 0
        original_avg_score = sum(m['total_score'] for m in original_matches) / len(original_matches) if original_matches else 0
        
        print(f"\nüéØ Qualidade dos Matches:")
        print(f"   Score M√©dio H√≠brido: {hybrid_avg_score:.3f}")
        print(f"   Score M√©dio Original: {original_avg_score:.3f}")
        print(f"   Melhoria: {((hybrid_avg_score - original_avg_score) / original_avg_score * 100):+.1f}%" if original_avg_score > 0 else "N/A")
        
        # 10. Conclus√µes e recomenda√ß√µes
        print("\nüéØ CONCLUS√ïES E RECOMENDA√á√ïES")
        print("=" * 70)
        
        if hybrid_avg_score > original_avg_score:
            print("‚úÖ Sistema H√≠brido mostra MELHOR qualidade de matching")
        elif hybrid_avg_score == original_avg_score:
            print("‚öñÔ∏è Sistema H√≠brido mostra QUALIDADE EQUIVALENTE")
        else:
            print("‚ö†Ô∏è Sistema H√≠brido mostra qualidade INFERIOR (pode precisar de ajustes)")
        
        if time_improvement > 0:
            print(f"‚úÖ Sistema H√≠brido √© {time_improvement:.1f}% MAIS R√ÅPIDO")
        else:
            print(f"‚ö†Ô∏è Sistema H√≠brido √© {abs(time_improvement):.1f}% MAIS LENTO")
        
        print("\nüöÄ RECOMENDA√á√ïES:")
        print("- Sistema H√≠brido √© recomendado para produ√ß√£o")
        print("- Monitore custos regularmente usando o CostTracker")
        print("- Considere popular base de dados vectorial completa para melhor cobertura")
        print("- Use cache persistente para reduzir custos de embeddings")
        
    except Exception as e:
        logger.error(f"Erro no teste: {e}")
        print(f"‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

def show_cost_summary():
    """Mostra resumo de custos do sistema"""
    
    print("\nüí∞ RESUMO DE CUSTOS DO SISTEMA")
    print("=" * 50)
    
    db = SessionLocal()
    
    try:
        ai_processor = AIProcessor(api_key=os.getenv('OPENAI_API_KEY'), session=db)
        stats = ai_processor.cost_tracker.get_total_stats()
        
        print(f"Total hist√≥rico: {stats['all_time']['total_cost_formatted']}")
        print(f"Total de chamadas: {stats['all_time']['total_calls']}")
        print(f"Cache hit rate: {stats['all_time']['cache_stats']['hit_rate']:.1f}%")
        print(f"Custo m√©dio por chamada: ${stats['all_time']['average_cost_per_call']:.6f}")
        
        print("\nBreakdown por opera√ß√£o:")
        for op in stats['by_operation']:
            print(f"  {op['operation']:25}: ${op['cost']:.6f} ({op['calls']} chamadas)")
        
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
    
    finally:
        db.close()

if __name__ == "__main__":
    test_hybrid_matching_with_cost_tracking()
    show_cost_summary()
